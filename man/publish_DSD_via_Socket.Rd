% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/publish_DSD_via_Socket.R
\name{publish_DSD_via_Socket}
\alias{publish_DSD_via_Socket}
\title{Write a Stream to a Socket}
\usage{
publish_DSD_via_Socket(dsd, port = 6011, blocksize = 1024L)
}
\arguments{
\item{dsd}{A DSD object.}

\item{port}{port used to serve the DSD.}

\item{blocksize}{number of data points pushed on the buffer at once.}
}
\description{
Use a \code{write_stream()} to write data to a socket connection.
}
\details{
Provide access to a data stream using a local port.

Blocking: The DSD will be blocked once the
buffer is full and resume producing data when it gets unblocked.

This method does not provide a header.
}
\examples{
# create a background DSD process sending data to port 6011
rp1 <- DSD_Gaussians(k = 3, d = 3) \%>\% publish_DSD_via_Socket(port = 6011)
rp1

Sys.sleep(1) # wait for the socket to become available

# connect to the port and read
con <- socketConnection(port = 6011, open = 'r') 
Sys.sleep(1) # wait for the connection to establish
dsd <- DSD_ReadStream(con, col.names = c("x", "y", "z", ".class"))

get_points(dsd, n = -1)
get_points(dsd, n = -1)

plot(dsd)

# close connection
close_stream(dsd)

# end the DSD process. Note: that closing the connection above 
# may already kill the process.
rp1$kill()
rp1
}
\seealso{
Other dsd: 
\code{\link{DSD_ReadSocket}()},
\code{\link{DSD_ReadWebService}()},
\code{\link{publish_DSD_via_WebService}()}
}
\concept{dsd}
