% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/publish_DSC_via_WebService.R
\name{publish_DSC_via_WebService}
\alias{publish_DSC_via_WebService}
\title{Publish a Data Stream Clustering Task via a Web Service}
\usage{
publish_DSC_via_WebService(
  dsc,
  port = 8001,
  task_file = NULL,
  serializer = "csv",
  serve = TRUE,
  debug = FALSE
)
}
\arguments{
\item{dsc}{A character string that creates a DSC.}

\item{port}{port used to serve the task.}

\item{task_file}{name of the plumber task script file.}

\item{serializer}{method used to serialize the data. By default \code{csv} (comma separated values)
is used. Other methods are \code{json} (see \link[plumber:serializers]{plumber::serializer_csv}).}

\item{serve}{if \code{TRUE}, then a task file is written and a server started, otherwise,
only a plumber task file is written.}

\item{debug}{if \code{TRUE}, then the service is started locally and a web client is started to explore the interface.}
}
\description{
Uses the package \link{plumber} to publish a data stream task as a web service.
}
\details{
The function writes a plumber task script file and starts the web server to serve
the content of the stream using the endpoints
\itemize{
\item TBD
}

APIs generated using plumber can be easily deployed. See: \href{https://www.rplumber.io/articles/hosting.html}{Hosting}. By setting a \code{task_file} and \code{serve = FALSE} a plumber
task script file is generated that can deployment.
}
\examples{
# create a background clustering process sending data to port 8001
rp1 <- "DSC_DBSTREAM(r = .05)" \%>\%  
     publish_DSC_via_WebService(port = 8001)
rp1

# connect to the port and read manually.
library(httr)
Sys.sleep(2)  # give the server time to spin up

resp <- GET("http://localhost:8001/info")
d <- content(resp, show_col_types = FALSE)
d

# cluster
dsd <- DSD_Gaussians(k = 3, d = 2, noise = 0.05) 

tmp <- tempfile()
stream::write_stream(dsd, tmp, n = 500, header = TRUE)
resp <- POST("http://localhost:8001/update", body = list(upload = upload_file(tmp)))
unlink(tmp)
resp

# retrieve the cluster centers
resp <- GET("http://localhost:8001/get_centers")
d <- content(resp, show_col_types = FALSE)
head(d)

plot(dsd, n = 100)
points(d, col = "red", pch = 3, lwd = 3)

# kill the process.
rp1$kill()
rp1

# Debug the interface (run the service and start a web interface)
\dontrun{
"DSC_DBSTREAM(r = .05)" \%>\%
         publish_DST_via_WebService(port = 8001, debug = TRUE)
}
}
\concept{dsc}
