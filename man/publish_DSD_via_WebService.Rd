% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/publish_DSD_via_WebService.R
\name{publish_DSD_via_WebService}
\alias{publish_DSD_via_WebService}
\title{Publish a Data Stream via a Web Service}
\usage{
publish_DSD_via_WebService(
  dsd,
  port = 8001,
  task_file = NULL,
  serializer = "csv",
  serve = TRUE
)
}
\arguments{
\item{dsd}{A character string that creates a DSD.}

\item{port}{port used to serve the DSD.}

\item{task_file}{name of the plumber task script file.}

\item{serializer}{method used to serialize the data. By default \code{csv} (comma separated values)
is used. Other methods are \code{json} (see \link[plumber:serializers]{plumber::serializer_csv}).}

\item{serve}{if \code{TRUE}, then a task file is written and a server started, otherwise,
only a plumber task file is written.}
}
\description{
Uses the package \link{plumber} to publish a data stream as a web service.
}
\details{
The function writes a plumber task script file and starts the web server to serve
the content of the stream using the endpoints \verb{http://localhost:port/get_points?n=100}) and
\verb{http://localhost:port/info}.

APIs generated using plumber can be easily deployed. See: \href{https://www.rplumber.io/articles/hosting.html}{Hosting}
}
\examples{
# create a background DSD process sending data to port 8001
rp1 <- "DSD_Gaussians(k = 3, d = 3)" \%>\% 
         publish_DSD_via_WebService(port = 8001)
rp1

#' Sys.sleep(1) # wait for the socket to become available

# connect to the port and read
resp <- httr::GET("localhost:8001/info")
d <- httr::content(resp, show_col_types = FALSE)
d

# example: Get 100 points and plot them
resp <- httr::GET("http://localhost:8001/get_points?n=100")
d <- httr::content(resp, show_col_types = FALSE)
head(d)

dsd <- DSD_Memory(d)
dsd
plot(dsd, n = -1)

# end the DSD process. Note: that closing the connection above
# may already kill the process.
rp1$kill()
rp1

# Publish using json

rp2 <- "DSD_Gaussians(k = 3, d = 3)" \%>\% 
         publish_DSD_via_WebService(port = 8001, serializer = "json")
rp2

#' Sys.sleep(1) # wait for the socket to become available

# connect to the port and read
resp <- httr::GET("localhost:8001/info")
httr::content(resp, as = "text")

resp <- httr::GET("http://localhost:8001/get_points?n=5")
httr::content(resp, as = "text")

# cleanup
rp2$kill()
rp2

}
